# -*- coding: utf-8 -*-
"""Football Match Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wQhoHK_xWL9htIV7n7xDn2NTGBoVb5yR
"""

import pandas as pd

matches_csv = pd.read_csv("https://raw.githubusercontent.com/dataquestio/project-walkthroughs/master/football_matches/matches.csv",index_col=0)

matches_csv.head()

matches_csv.shape

matches_csv["team"].value_counts()

"""Cleaning the data"""

matches_csv.dtypes

matches_csv["date"] = pd.to_datetime(matches_csv["date"]) #Converting date column into date type

matches_csv.head()

"""Creating Predictors"""

# Converting venue into numeric value
matches_csv["venue_code"] = matches_csv["venue"].astype("category").cat.codes

# Converting opponent into numeric value
matches_csv["opp_code"] = matches_csv["opponent"].astype("category").cat.codes

# Converting time to numeric value
matches_csv["hour"] = matches_csv["time"].str.replace(":.+","",regex=True).astype(int)

# Converting day into a numeric value
matches_csv["day_code"] = matches_csv["date"].dt.dayofweek

# Adding the target variable
matches_csv["target"] = (matches_csv["result"]=='L').astype(int)

matches_csv

"""Creating the Initial machine learning model"""

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier(n_estimators=50, min_samples_split=10, random_state=1)

# Training set
train = matches_csv[matches_csv["date"] < '2022-01-01']

# Test set
test = matches_csv[matches_csv["date"] > '2022-01-01']

# Predictors
predictors = ["venue_code","opp_code","hour","day_code"]

model.fit(train[predictors],train["target"])

preds = model.predict(test[predictors])

# Accuracy test
from sklearn.metrics import accuracy_score

acc = accuracy_score(test["target"],preds)

acc

"""Checking the model accuracy"""

combined = pd.DataFrame(dict(actual=test["target"], prediction=preds))

pd.crosstab(index=combined["actual"],columns=combined["prediction"])

from sklearn.metrics import precision_score

precision_score(test["target"],preds)

"""Improving Precision"""

grouped_matches = matches_csv.groupby("team")

group = grouped_matches.get_group("Manchester City")

group

def rolling_averages(group,cols,new_cols):
  group = group.sort_values("date")
  rolling_stats = group[cols].rolling(3,closed='left').mean()
  group[new_cols] = rolling_stats
  group = group.dropna(subset=new_cols)
  return group

cols = ["gf","ga","sh","sot","dist","fk","pk","pkatt"]
new_cols = [f"{c}_rolling" for c in cols]

new_cols

rolling_averages(group,cols,new_cols)

matches_rolling = matches_csv.groupby("team").apply(lambda x: rolling_averages(x,cols,new_cols))

matches_rolling

matches_rolling = matches_rolling.droplevel('team')

matches_rolling

matches_rolling.index = range(matches_rolling.shape[0])

matches_rolling

"""Retraining the model"""

def make_predictions(data,predictors):
  train = data[data["date"] < '2022-01-01']
  test = data[data["date"] > '2022-01-01']
  model.fit(train[predictors],train["target"])
  preds = model.predict(test[predictors])
  combined = pd.DataFrame(dict(actual=test["target"], prediction=preds), index=test.index)
  precision = precision_score(test["target"],preds)
  return combined, precision

combined, precision = make_predictions(matches_rolling, predictors + new_cols)

precision

combined = combined.merge(matches_rolling[["date","team","opponent","result"]],left_index=True,right_index=True)

combined

class MissingDict(dict):
  __missing__ = lambda self, key: key

map_values = {"Brighton and Hove Albion": "Brighton", "Manchester United": "Manchester Utd", "Newcastle United": "Newcastle Utd", "Tottenham Hotspur": "Tottenham", "West Ham United": "West Ham", "Wolverhampton Wanderers": "Wolves"}

mapping = MissingDict(**map_values)

combined["new_team"] = combined["team"].map(mapping)

combined

merged = combined.merge(combined, left_on=["date", "new_team"], right_on=["date", "opponent"])

merged[(merged["prediction_x"] == 1) & (merged["prediction_y"] == 0)]["actual_x"].value_counts()